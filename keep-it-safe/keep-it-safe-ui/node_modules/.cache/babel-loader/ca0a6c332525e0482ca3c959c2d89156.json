{"ast":null,"code":"var _jsxFileName = \"C:\\\\OSU\\\\Term5\\\\CS361_SE\\\\KeepItSafe\\\\keep-it-safe\\\\keep-it-safe-ui\\\\src\\\\pages\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Search() {\n  _s();\n\n  const [loginList, setLoginList] = useState([]);\n  const [searchString, setSearchString] = useState(\"\");\n  const [typoFix, setTypoFix] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  function getLogins() {\n    Axios.get(\"http://localhost:4500/view-all\").then(response => {\n      setLoginList(response.data);\n    });\n  }\n\n  ;\n\n  function createNameArray(logins) {\n    const nameArray = [];\n    logins.map(login => nameArray.push(login.websiteName.toLowerCase()));\n    return nameArray;\n  }\n\n  useEffect(() => {\n    getLogins();\n  }, []);\n\n  const checkSearch = () => {\n    const listOfSites = createNameArray(loginList);\n    const searchTerm = searchString.toLowerCase();\n\n    if (listOfSites.includes(searchTerm)) {\n      console.log(\"website found\");\n    } else {\n      Axios.post(\"http://localhost:4500/search\", {\n        searchTerm: searchTerm,\n        listOfSites: listOfSites\n      }).then(response => {\n        const response_string = response[0].toString();\n        setTypoFix(response_string);\n        setErrorMessage(true);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-outline\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"search\",\n          placeholder: \"Search...\",\n          value: searchString,\n          onChange: e => setSearchString(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: checkSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: errorMessage ? 'block' : 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"This is the type fix: \", setTypoFix]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Search, \"NcpAC0lbPIig9toomdivP5vFf7w=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/OSU/Term5/CS361_SE/KeepItSafe/keep-it-safe/keep-it-safe-ui/src/pages/Search.js"],"names":["React","useState","useEffect","Axios","Search","loginList","setLoginList","searchString","setSearchString","typoFix","setTypoFix","errorMessage","setErrorMessage","getLogins","get","then","response","data","createNameArray","logins","nameArray","map","login","push","websiteName","toLowerCase","checkSearch","listOfSites","searchTerm","includes","console","log","post","response_string","toString","e","target","value","display"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {useState, useEffect} from 'react';\r\nimport Axios from 'axios';\r\n\r\n\r\n\r\nfunction Search() {\r\n\r\n    const [loginList, setLoginList] = useState([])\r\n    const [searchString, setSearchString] = useState(\"\")\r\n    const [typoFix, setTypoFix] = useState(\"\")\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n\r\n\r\n    function getLogins() {\r\n      Axios.get(\"http://localhost:4500/view-all\").then((response) => {\r\n        setLoginList(response.data)\r\n      }\r\n    )};\r\n\r\n    function createNameArray(logins) {\r\n        const nameArray = []\r\n        logins.map((login) => nameArray.push((login.websiteName).toLowerCase()))\r\n    return(nameArray)\r\n    }\r\n\r\n    useEffect(() => {getLogins()},[]);\r\n\r\n    const checkSearch = () => {\r\n        const listOfSites = createNameArray(loginList)\r\n        const searchTerm = searchString.toLowerCase()\r\n        if (listOfSites.includes(searchTerm)) {\r\n            console.log(\"website found\")\r\n        } else {\r\n            Axios.post(\"http://localhost:4500/search\", {\r\n                searchTerm: searchTerm,\r\n                listOfSites: listOfSites\r\n            }).then((response) => {\r\n                const response_string = (response[0]).toString()\r\n                setTypoFix(response_string)\r\n                setErrorMessage(true)\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Search Page</h1>\r\n      <div className=\"input-group\">\r\n        <div className=\"form-outline\">\r\n            <input \r\n                type=\"search\" \r\n                placeholder=\"Search...\"\r\n                value={searchString}\r\n                onChange={(e) => setSearchString(e.target.value)}/>\r\n        </div>\r\n        <button type=\"button\" onClick={checkSearch} >Search</button>\r\n        <div style={{display:errorMessage ? 'block': 'none'}}>\r\n            <h1>This is the type fix: {setTypoFix}</h1>\r\n        </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n"]},"metadata":{},"sourceType":"module"}